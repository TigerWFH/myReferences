2016.4.14  开始学习计划
    Backlog:深入学习AngularJs和Ionic                     TigerWFH 4.14
    
    Selected:深入学习AngularJs，并完成Day Tasks           TigerWFH 4.14
    
    Develop:                                           
            Ongoing：AngularJS中的多重视图和路由           TigerWFH 4.14
            
            Done： route_view.html                                    
    
    Deploy:
           1、使用bower安装angular-route模块，并引入目标文件中
           2、布局模板和视图：AngularJs会根据路由自动将对应的视图加载的布局模板并在布局模板中显示视图
           3、ngview指令：由ngRoute模块提供，作用是在HTML中给$route对应的视图内容占位。
           4、路由函数when和otherwise：when指定路由和模板等内容；otherwise设定默认路由。
           5、$routeParams接受URL中的参数
           6、$location服务：解析地址栏的URL，并提供对应功能。
           7、路由的两种模式：标签模式和HTML5模式
           8、路由事件：$routeChangeStart,$routeChangeSuccess, $routeChangeError,$routeUpdate                       
    Live:  初步了解了多视图与路由的知识，能够正确的将试图导入到布局模板中，建立正确的对应关系。可以进一步探索其他的未使用功能。
                                            TigerWFH 4.14
     4.15
     Develop:
            Ongoing: 依赖注入
            Done:
     Deploy:
            一个对象通常有3种方式可以获得它所依赖对象的控制权：
                1、在对象内部创建依赖对象（作用域隔离变得异常困难）
                2、通过全局变量引用依赖对象（会污染全局作用域）
                3、在需要的地方通过参数进行传递（用的时候再创建）
            本节的依赖注入就是通过第三种方式实现的。依赖注入是一种设计模式，可以去除依赖关系的硬编码，从而可以在运行时改变甚至移除依赖关系。
            对于DI容器来说，必需具备三点：服务的注册、依赖关系的声明、对象的获取。
            在AngularJs中，module和$provide相当于服务的注册，注册到injector中；Angular.module()创建、获取、注册angular中的模块。$provide提供了provide()、constant()、value()、factory()、service()来创建各种不同的服务。
            
            injector用来获取对象（angularjs会自动完成依赖的注入）；
            依赖关系的声明在AngularJs中有3种方式。
            AngularJs使用$injector（注入器服务）来管理依赖关系的查询和实例化。事实上，$injector负责实例化AngularJs中所有的组件，包括应用的模块、
            指令和控制器等。在运行时，任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去。
            当编写控制器时，如果没有使用[]标记或者进行显式声明，$injector就会尝试通过参数名推断依赖关系。
            1、推断式注入声明
                （重点重点）没有显式声明，AngularJs会假定参数名就是依赖名称，自行判断。（所以代码中总是看到参数名不能自行命名）
            2、显式注入声明
                函数的$injector属性来实现，这是一个数组。
            3、行内注入声明
                传入参数数组而不是函数。
                angular.modul('myApp')
                       .controller('MyController',['$scope','greeter',function(){}]);
            注入器的API:
                1、annotate():返回一组服务名称。
                2、get():返回一个服务的实例。
                3、has():返回布尔值。true:有对应服务；false：没有指定的服务。
                4、instantiate():创建JS类型的实例，通过new。
                5、invoke():调用一个方法，并通过$injector传递对应函数参数
            认识ngMin.
     Live:
         初步了解了注入器服务，但仍然有迷惑，对程序的构建，服务的注入过程任然不是太清晰，需要进一步的学习探究。
                                                                TigerWFH
     4.18
     Develop:
            Ongoing:服务
            Done:
     Deploy:
            服务提供了一种能在应用的整个生命周期内保持数据的方法，它能够在控制器之间进行通信，并且能够保证数据的一致性。
            AngularJs中创建服务非常容易：只需要注册这个服务即可。服务被注册后，AngularJs编译器就可以引用它，并且在运行时把他当做依赖加载进来。
            1、注册一个服务
                factory(name, getFn):创建和配置服务的最快捷方式。
                    服务工厂函数用来生成一个单例的对象或函数，这个对象或函数就是服务，它会存在于应用的整个生命周期内。服务工厂函数既可以是一个函数也可以是一个数组。
                    在自定义服务之前注入所有的AngularJs内置服务，这是约定俗称的规则。使用服务也是在控制器之间共享数据的典型方法。服务在应用的生命周期内是单例模式。因此可以将用户名安全的存储在其中。
                
                service(name, constructor)：可以注册一个支持构造函数的服务，他允许我们为服务对象注册一个构造函数。在创建实例时会通过new关键字来实例化服务对象。
                
                provider(name, aProvider):所有服务工厂都是由$provide服务创建的，$provide服务负责在运行时初始化这些提供者。提供者是一个具有$get()方法的对象，$injector通过调用$get方法创建服务实例。
                          （迷惑ing）
                          通过使用.provider()方法，可以在多个应用使用同一个服务时获得更强的扩展性，特别是在不通应用或开源社区之间共享服务时。
                          
                constant(name, value):将一个已经存在的变量值注册为服务，并将其注入到应用的其他部分中。
                
                value(name, value):
            decorator():
     Live:
            这一章内容好迷糊啊!再找资料。
                                                                     TigerWFH                   
     
                
      
    